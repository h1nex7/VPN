from aiogram import Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.database.requests import set_user
import app.keyboard as kb
from app.states import RegStates


client = Router()


@client.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    is_user = await set_user(message.from_user.id)
    if is_user:
        await message.answer(f'–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å {message.from_user.first_name}', reply_markup=kb.main_kb)
    else:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫e —Å–Ω–∏–∑—É',
                             reply_markup=kb.connect_register)
        await state.set_state(RegStates.reg_first)


@client.callback_query(F.data == 'back_to_main')
async def back_to_main(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å {callback.from_user.first_name}', reply_markup=kb.main_kb)


@client.callback_query(F.data == 'connected')
async def start_registration(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegStates.choose_device)
    await callback.answer()
    await callback.message.answer(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç OkayVPN.\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à VPN! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN:",
        reply_markup=kb.devices_kb
    )


@client.callback_query(StateFilter(RegStates.choose_device), F.data.startswith('device_'))
async def choose_device(callback: CallbackQuery, state: FSMContext):
    device = callback.data.split('_')[1]
    await state.update_data(device=device)

    await state.clear()

    if device == 'ios':
        instruction = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è iOS: ..."
    elif device == 'android':
        instruction = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è Android: ..."
    elif device == 'macos':
        instruction = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è MacOS: ..."
    else:
        instruction = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è Windows: ..."

    await callback.message.answer(instruction, reply_markup=kb.after_reg)
    await callback.answer()


# –ü–æ–º–æ—â—å
@client.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–ü–æ–∫–∞ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', reply_markup=kb.help_kb)


@client.callback_query(F.data == 'help')
async def devices(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–ü–æ–∫–∞ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', reply_markup=kb.help_kb)


# –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
@client.message(Command('invite'))
async def cmd_invite(message: Message):
    await message.answer(f'–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É')


@client.callback_query(F.data == 'invite')
async def devices(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É')


# –î–µ–≤–∞–π—Å—ã
@client.message(Command('devices'))
async def cmd_help(message: Message):
    await message.answer(f'–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–µ–≤–∞–π—Å—ã')


@client.callback_query(F.data == 'devices')
async def devices(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–µ–≤–∞–π—Å—ã')
